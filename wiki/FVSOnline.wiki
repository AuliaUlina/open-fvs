#summary FVSOnline Installation and Programmer Notes

=FVSOnline Installation and Programmer Notes=

*A work in progress!* Note that this documentation is being developed as the software evolves. Contact the author directly if you have questions or comments. 

Nicholas Crookston (ncrookston.fs@gmail.com)

Date of Last Revision: February 23, 2015

= Contents =

<wiki:toc max_depth="2" />

==Introduction==

FVSOnline is an interface to the Forest Vegetation Simulator
(http://www.fs.fed.us/fmsc/fvs/). It was created as a replacement to the Suppose
user interface to FVS (http://www.fs.fed.us/fmsc/fvs/software/suppose.php) using
the Shiny web application framework (hereafter Shiny; http://shiny.rstudio.com/)
which is implemented using the R programming language
(http://www.r-project.org/) for the server code and html plus JavaScript
([http://en.wikipedia.org/wiki/JavaScript]) for the client code. FVSOnline also
relies on rFVS (see [rFVS]) to interact with FVS. FVSOnline is a Shiny web application.

This document is covers very basic information about what is required to install
and run FVSOnline. The content assumes that you are basically familiar with the
R, the Shiny web application framework, FVS, rFVS, Suppose, and SQL (including
ODBC). Necessary background can be gained by visiting the web documents cited
above.

Shiny can be run in two different contexts, herein (1) the local machine context
and (2) the client-server context. In the local machine context, FVSOnline and
FVS run entirely within the end user’s computer, which can be a Windows-based
PC, a MAC, Linux or other Unix-like system. In the local context, all the
software and data needed to run the entire system is loaded on the local
computer. The user interacts with the system through the installed web browser
but no Internet communication is used. In this context, a local R session is
started, the Shiny package is loaded, and the FVSOnline application is run. The
local R session starts a local server that interacts with the system browser.
FVS itself is started using rFVS code running under of the local R session.

In the client-server context, a different setup is used. First, server is
provided on a server computer that is on the Internet. Specialized server
software called the Shiny-server runs on the server system
(http://www.rstudio.com/products/shiny/shiny-server/) and it starts R and all
the subsequent software as needed. That includes FVS, rFVS, and all other
components of the system except the client browser. The end users need no
software except a browser on their computers that can run JavaScript. Using this
configuration, FVS can be used with a tablet PC or even a smartphone (but the
screen size limit would be a hindrance).

In either context, one person generally uses a session of FVSOnline at a time.
In the client-server context, several simultaneous users are connected to
separate sessions on the server, but each has their own working directory and
copy of the FVSOnline scripts and FVS binary programs. All users share the
system software listed below. A separate Shiny application called the FVS
Project Builder is used to set up the individual user’s project workspace (see
[FVSOnline#FVS_Project_Builder FVS Project Builder]).

There are very few differences in the FVSOnline software to support these two
contexts. The will be covered on a case-by-case bases.

==Required System Software==

Client/Server context requires the Shiny server as stated above. In both
contexts, the additional software that is needed includes R and the R-packages
listed below, a JavaScript enabled browser, and the following:

  * *R:* Get it from http://cran.r-project.org/

  * *sqlite3:* used to interact with FVS-generated data both for input and output (http://www.sqlite.org/). In addition to sqlite3, an sqlite3 database browser is recommended, see http://sqlitebrowser.org/.

  * *sqlite3 ODBC driver:* (http://www.ch-werner.de/sqliteodbc/) used to provide ODBC services between the FVS model and the sqlite3 databases. On unix-alike systems, unixODBC is required to support the driver, but it is also required to build base FVS on those systems.

  * *Java:* generally Java comes installed on most systems. It is used in FVSOnline to convert Access database files to sqlite3 database files. The ability to convert these files is built into FVSOnline.

  * *pandoc:* (http://johnmacfarlane.net/pandoc/) used to convert FVSOnline-generated markdown language to Microsoft Word docx files. The ability to build custom reports in FVSOnline relies on this technology.

  * *FVS:* ([BuildProcess_UnixAlike]). FVS needs to be built and installed.

==Required R Packages==

All required packages are available from CRAN (http://cran.r-project.org/).

  * *shiny:* the Shiny web framework

  * *parallel:* used to start a child R process that is used to make the FVS runs. This approach allows for future expansion to running multiple R processes and breaking up large FVS runs among several processors. It also protects the parent FVSOnline session from abnormal terminations of the FVS run.

  * *ggplot2:* used to provide high-quality graphics.

  * *RSQLite:* used to provide database input/output services for FVSOnline. All the data interactions are done via SQLite.

==Files Installed In User’s Working Directories==

  * *autoOutKeys.R:* Defines character strings that contain FVS keywords necessary to cause specific sets of FVS outputs to be generated. For example, if a user desires a generic set of carbon reports be generated, several FVS keywords are inserted into the FVS run. There is a variable definition in this file that defines that set.

  * *customRun_fvsRunAcadian.R:* Contains all the rFVS code necessary to run the Acadian modification to FVS. See runScripts.R, and the section [FVSOnline#Custom_Run_Scripts Custom Run Scripts].

  * *editDataServer.R:* The server code to run an input data editor (a planned enhancement).

  * *editDataUI.R:* The ui code for the input data editor (see editDataServer.R).

  * *fvsOutUtilities.R:* Defines functions related to processing the output database.

  * *fvsRunUtilities.R:* Defines functions used to build the FVS run and managing the R data structures that contain the details of all runs for the users project.

  * *localSettings.R:* Should only be present when the FVSOnline system is running in the local context. It defines variables that inform the software as to the location of FVS binary code and the list of variants supported on the local machine. It should not be present in a user’s project directory when the server context is being used.

  * *mkInputElements.R:* Defines functions used to display keyword entry elements and build keywords from the user’s input. Relies on data compiled from the Suppose parameters file.

  * *mkpkeys.R:* Defines functions used to parse the Suppose parameters file. The data housed in this file defines the FVS keywords and their fields among other information.

  * *modalDialog.R:* Defines functions that the very few control modal dialogs used in FVSOnline.

  * *runScripts.R:* Defines the names and labels for custom run scripts (see [FVSOnline#Custom_Run_Scripts Custom Run Scripts]).

  * *server.R:* The FVSOnline application server code.

  * *sqlQueries.R:* Defines variables that contain the sqlite queries used to process the output database. For example, the creation of the stand and stock tables is done using sql statements defined in this file.

  * *topHelp.R:* Defines the text of the help displayed if the help action button is pushed.

  * *ui.R:* The FVSOnline user interface definition code.

  * *plotType.html:* Part of the user interface definition (see ui.R).

  * *access2csv.jar:* Used to convert Access databases to sqlite3 databases, distributed with this code by originally from https://github.com/AccelerationNet/access2csv.

  * *suppose.prm:* A current version of the Suppose parameters file.

  * *prms.RData:* A compiled translation of suppose.prm that is used directly by FVSOnline. If this file is out-of-date or missing, FVSOnline creates it. The best practice is to insure it is current.

  * *FVS_Data.db.default:* This as an sqlite3 database that is a converted version of the Access database distributed by the USDA Forest Service, see: http://www.fs.fed.us/fmsc/fvs/software/complete.php

  * *www/FVSlogo.png:* A small FVS logo used in the interface heading.

  * *www/message-handler.js:* JavaScript code that is used to support the modal windows.

  * *rFVS/*: All the files that make up rFVS, see: [rFVS].

  * *FVSBin/*: The FVS shared libraries (.dll’s on Windows, .so’s on unix-alikes) (also see localSettings.R).

==Custom Run Scripts==

A custom run script is an R script that, at a minimum mimics the action of the function [rFVS#fvsRun() fvsRun()], but may use many additional features of [rFVS] to change the growth or mortality of trees or to add new trees thereby changing stand composition. Code can also be created that creates additional reports, including output database tables. 

Users may decide to include or not include the use of the custom script by selecting it from a list of those that are available in a given installation of FVSOnline.

Two actions must be accomplished to make a custom run script available to FVSOnline users. First, an entry in `runScripts.R` must be added provides the script _name_ and provides a descriptive title that will be displayed in the interface. 

The second action is that the script file (and other files that may be necessary) must be provided in the application directory. FVSOnline will read the file that contains the custom code and use it if it is selected. The script’s _file name_ must in the form: `customRun_<scriptName>.R`, where the `scriptName` is identical to the name given in the runScripts.R file.  If the custom run script is selected, FVSOnline will read the custom file and call the custom function in place of the default call to [rFVS#fvsRun() fvsRun()]. 

System security of FVSOnline running in the true client/server context can be completely compromised if users were allowed to directly upload the custom scripts. System administrators should take care to insure that only well behaved scripts are installed.

=FVS Project Builder=

FVS project builder is a Shiny application that creates FVSOnline project directories and installs all necessary files to run FVSOnline. This application addresses the need to provide an automated system for doing this task for each user, and for each project. Without the project builder, building separate installations of FVSOnline for each user could be huge bottleneck to its use in any organization. While this application solves the problem for the client-server context, it is designed for addressing similar needs when FVSOnline is run in the local machine context. 

Users provide a project name and their Email addresses. The project builder software creates a project directory for them and loads the necessary files. An Email is sent to the user with a link to their own installation. In addition, the project builder tool allows for a user to simply supply an Email address and the software will send them an Email with all projects listed that were created with that Email address. 

The files used in the project build application are listed below. Note that the project builder application requires that a Email services are running on your server as project builder sends Email.

  * *prjListEmail.R:* Contains a function that compiles the list of all projects related to a given Email address.

  * *server.R:* The FVS project builder application server code.

  * *settings.R:* A list of installation-specific settings that include the names of key directories and a manifest of the files needed for an installation of FVSOnline. This manifest must be complete, it is hand edited for a given installation as necessary.

  * *ui.R:* The FVS project builder user interface definition code.

  * *uuidgen.R:* An R uuid generator used to define working directory names.

  * *www/FVSlogo.png:* A small FVS logo used in the interface heading.

=Installation=

==Local System Context==

  # Install R and the [FVSOnline#Required_R_Packages required R packages].
  # Install FVS and rFVS, including the FVSOnline source, see [DownloadingSourceCode] and the wiki entries regarding build processes, [BuildProcess_MinGW] and [BuildProcess_UnixAlike]. 
  # Make a working directory and copy the FVSOnline scripts into that directory. Those scripts are provided with the FVS software and stored in the rFVS directory tree.
  # Edit the file `localSettings.R` so that is reflects your installation.
  # Start R
  # At the R prompt, enter 
{{{
require (shiny)
runApp()
}}}

==True Client/Server Context==

  # Install R and the [FVSOnline#Required_R_Packages required R packages].
  # Install the shiny server software for your OS. See http://www.rstudio.com/products/shiny/shiny-server/ for more information.
  # Install the other [FVSOnline#Required_System_Software required software].
  # Install FVS and rFVS, including the FVSOnline source, see [DownloadingSourceCode] and the wiki entries regarding build processes, [BuildProcess_MinGW] and [BuildProcess_UnixAlike]. 
  # Make a shiny application directory and copy the FVSOnline scripts into that directory. This directory should be registered with the shiny configuration files for your system. The Shiny installation instructions provide documentation for that file.
  # Create a subdirectory called FVSBin and copy the FVS shared libraries into that subdirectory. 
  # Create a subdirectory called rFVS and copy the rFVS/R contents into that subdirectory.  
  # Open a browser and enter this url:  http://localhost:3838/<app dir defined above>

If you desire to use the FVS project builder, set it up as a separate shiny application and edit the `settings.R` file to reflect your installation. 

==A Few Suggestions==

  # Set up a `cron` task that runs `svn update` on the open-fvs repository every night and updates the programs, including running the compilers and tests. This will update the FVSOnline software. Note that the FVSOnline software uses copies of the scripts and FVS libraries that are stored in user’s individual workspaces. Users control if and when new software will be copied in to their project directories. This approach is necessary in a modeling system because users need to be capable of freezing the software used in a specific project. 
  # Another `cron` task can be used to delete obsolete projects (those not accessed over a specified time). It would be simple to include the ability to archive these old projects prior to deletion. The main point is that resource management can and should be automated. Exact policies will depend on organizational desires. 