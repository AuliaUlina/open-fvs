#summary Running FVS from VB.Net

=Running FVS from VB.Net using the API=

_Don Robinson, [http://www.essa.com ESSA] Technologies, June 2013_

This wiki documents the process of writing VB.Net code to run FVS using the API (see [FVS_API]). This code is under development and 15 of 22 API calls ('Methods') have been built and tested. These methods provide templates for the completion of the interface, and new participants and developers are welcome.

Depending on the tool chain and variant name, there are small differences in the names of FVS DLLs and names of the API calls, respectively. These differences are very minor, and the sample code and instructions that will be provided will make it clear how to adapt to any combination of tool chain and variant. The example which is provided is specific to the BC variant built with Visual Studio (see [BuildProcess_VisualStudio]), which is targeted for integration with the TELSA model.


= Contents =

<wiki:toc max_depth="3" />

==Example Files==
There are 5 main files in the example code. The working example contains other (undocumented) files and directories which are necessary to the VS2010 solution, but which are not altered by the developer. The home directory of files and directories listed in the table below is `.\VB.Net-FVS`.

|| *Filename* || *Purpose* || 
|| .\FVS\FVS.sln || The VS2010 Solution file which implements the class and methods described on this Wiki page, and which demonstrates the use of these methods for calling the FVS-BC variant. ||
|| .\FVS\FVS_API.vb || Class definitions which form the basis for all the higher level VB code. ||
|| .\FVS\FVS_Signatures.vb || Declarations for all the API calls. These use the explicit name of the main FVS-BC variant DLL (`FVS_bcc.dll`) and the declare the VB data type for each argument found in the lower level call to the API. The argument lists are based on the arguments of the lower level API (see [FVS_API]) but the correspondence is not always exact. ||
|| .\Testing\Testing.vb || A working example of VB code which runs FVS.||
|| .\Testing\bin\Debug || This subdirectory contains the FVS-BC variant DLLs which are called through the API; the keyword and Access database files used in the working example, and the location for any temporary and permanent output files created during the simulation. All DLL files created by the VS2010 build chain must be manually copied to this directory for the simulation to run. If you wish to code-walk into FVS Fortran/C/C++ code from within the VB application, the corresponding PDB (Program Data Base) files created by VS2010 during a *Debug* compile, must also be copied here. ||

==The FVS_API Class==
Class definitions are located in the file `FVS_API.vb`.

===Declarations===
There is a single private String variable `MeasurementType` used to specify whether input and output should be in imperial or metric units. The default value is "imperial" (e.g. DBH in inches), but this can be changed using a `Property` procedure described below.

===Constructor===
The `New()` constructor sets the default value for `MeasurementType` when a member of the FVS_API class is declared.

===Constants===
Seven constants are used so far. This code section encapsulates the process of metric/imperial unit conversion. If needed, additional constants can be borrowed from `/open-fvs/trunk/common/METRIC.F77` and implemented here.

===Properties===
The `MeasurementType` property allows input and output units to be converted between imperial units (the default) and metric units. Internally FVS almost always uses imperial units for its submodels and calculations. Metric unts can be set by code like this (from `Testing.vb`):

{{{
fvs.MeasurementUnits = "metric"
}}}

And the current unit-type can be discovered by code like this (from `FVS_API.vb`):

{{{
If (Me.MeasurementUnits = "metric") Then
  S(2) = CInt(S(2) / ACRtoHA)
End If
}}}

===Methods===
The methods implement the ... *<working here>*

{{{
TODO:
example of VB interfaces to FVS
example of VB.Net code
location of sample code and Visual Studio SLN file
metrification issues
}}}