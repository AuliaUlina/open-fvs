#summary Running FVS form R (*work in progress*)

Nick Crookston, January and May 2012

= Contents =

<wiki:toc max_depth="2" />

= Introduction =

This Wiki page discusses the use of FVS within the [http://www.r-project.org/ R System for Statistical Computing]. As stated in the discussion of the [FVS_API FVS Application Program Interface], using FVS as a _shared library_ requires that the library be loaded and called from a parent program -- here, the parent is R.

What follows is a description of each of several R functions that are in the `rFVS` portion of the open-fvs repository. This Wiki page serves as the documentation to that collection of functions. 

This is *_experimental work_* that is subject to change, particularly with respect to adding functions. 

= Getting Started =

== Notation Used Below ==

  * The code blocks specify commands entered into R.
  * The notation `<open-fvs>/` defines the directory where the open-fvs code is stored on your system. Modify this string so that the path name to the files can be found.

== Start up ==

The first step is to start R and load the `rFVS` functions found in `<open-fvs>/rFVS/R` [remember to replace the string `<open-fvs>` with the pathname of where you have stored your copy of the code.

{{{
sdir = "<open-fvs>/rFVS/R"
for (rf in dir (sdir)) source (paste(sdir,rf,sep="/"))
}}}

The second step is to load the FVS shared library. A function has been provided to accomplish that task. The following assumes that program `FVSiec` has been built as a shared library (or .dll if on Windows) (see [BuildProcess Build Process] for build instructions).

{{{
fvsLoad("FVSiec")
}}}

As an alternative, the directory name of the bin can be specified. 

{{{
fvsLoad("FVSiec", bin="<open-fvs>/trunk/bin")
}}}

= rFVS Function Reference =

The following is a list of the R functions that call [FVS_API FVS API] member functions as needed; consult the API for more information on the functions used. 

{{{
fvsAddTrees()
}}}

TODO: write function

{{{
fvsComplexRun (functionsToCall=list(NULL,NULL,NULL,NULL,NULL,NULL,fvsGetSummary))
}}}

This function is used to manage interaction between R and FVS. The only argument is a list (which can be a named list) of functions that are called at corresponding [FVS_API#Stop Points] in FVS cycles. If the corresponding function is NULL, then nothing is called and the stop point is skipped. There are 6 defined stop points, however, there are 7 functions in `functionsToCall`. The last function is called at the end of a simulation for each stand.

Return value:

A named list of the values returned by each of the functions in `functionsToCall` form a _case answer list_ (with one list member for each function that is called). If the function returns NULL, then there is no corresponding entry in _case answer list_. If names are used in specification of the `functionsToCall` argument, then those names are used to name the items in this list, otherwise default names for the returned values are generated by the function. 

There is one _case answer list_ for each stand and cycle. Each of these are placed in one larger list of lists. Names for each are automatically formed by the `standid`, `mgmtid`, and `year`. This larger list is the return value of the function.


{{{
fvsGetDims()
}}}

Return value:

A named vector of integers as follows: `ntrees, ncycles, nplots, maxtrees, maxspecies, maxplots, maxcycles`.

{{{
fvsGetPlotAttrs(vars)
}}}

Argument:

A vector of strings whereby each string names an attribute to be returned.

Return value:

A matrix of numeric values with one row for each plot and a column for each attribute.

TODO: The R code for this function is written but the [FVS_API FVS API] code is not.

{{{
fvsGetSpeciesCodes()
}}}

Return value: 

A matrix of character strings with one row for each species and three columns. The column names `fvs, fia, plant` correspond to the three kinds of species codes used in FVS. The order is exactly as presented in the FVS variant which means, for example, that row 1 corresponds to the internal FVS species index number 1, row 2 for species 2 and so on.

{{{
fvsGetStandIDs()
}}}

Return value:

A named vector of two strings, the first is named `standid` and the second `mgmtid`.

{{{
fvsGetSummary()
}}}

Return value: 

A matrix of integer values with one row for each completed FVS cycle. The columns are named as documented in the [FVS_API#FVS_Summary_Statistics FVS Summary Statistics].

TOTO: Set this up so that the column names are correct of eastern variants.

{{{
fvsGetTreeAttrs(vars)
}}}

Argument:

A vector of strings whereby each string names an attribute to be returned.

||Name||Description||
||`tpa`||Trees per acre||
||`dbh`||Diameter breast height (inches)||
||`dg`||Diameter growth scaled to cycle length (inches)||
||`ht`||Hieght (feet)||
||`htg`||Height growth scaled to cycle length (feet)||
||`crwdth`||Crown width (feet)||
||`cratio`||Crown ratio (proportion of height in live crown||
||`species`||FVS numeric species code||
||`age`||Tree age||

Return value:

A matrix of numeric values with one row for each plot and a column for each attribute.

TODO: Add more attributes, make sure units are as listed.

{{{
fvsLoad(fvsProgram,bin="../../trunk/bin")
}}}

This function loads the FVS dynamic library specified in the first argument. It has the side effect of creating an object in the R global environment called `.FVSLOADEDLIBRARY` that contains the names of the libraries loaded by the calle. If `.FVSLOADEDLIBRARY` exists when this function is called, the libraries that are already loaded are unloaded prior to the specified libraries being loaded.

Return value:

A copy of `.FVSLOADEDLIBRARY` is invisibly returned. 

{{{
fvsRun(stopPointCode=NA,stopPointYear=NA)
}}}

Arguments:
||`stopPointCode`||The stop point code corresponding to the next place in the FVS simulation form where the program should return.||
||` stopPointYear `||The stop point year corresponding to the next time the FVS simulation should return.||

Note: if one of the arguments is specified, the other must also be specified. If both are left as NA values, the defaults for FVS are used. Those defaults imply that no stopping be done.

Return value:

The FVS [FVS_API#Return_Code_State return code state] (integer).
.
{{{
fvsSetCmdLine(cl = NULL)
}}}

Sets the command line to the values listed of the [FVSCommandLine FVS Command Line]  _and_ opens files for input as indicted by the values found. This routine can result in the FVS [FVS_API#Return_Code_State return code state] to be reset.

Argument:

A character string that contains the command line arguments. If NULL (the default), the function attempts to fetch the arguments as they may be specified on the command that starts R. This is done by calling the R function `commandArgs(trailingOnly = TRUE)`, see R documentation for details.

Return value:

The argument passed argument is returned.

{{{
fvsSetPlotAttr
}}}

TODO: write function

{{{
fvsSetSiteAttr
}}}

TODO: write function

{{{
fvsSetTreeAttr
}}}

TODO: write function

{{{
fvsSetupSummary(sumTable)
}}}

Adds extra data to the summary statistics table returned by function `fvsGetSummary()`. The extra data include new columns showing total production of trees and volume plus new rows so  that years with removals have two data points, one for before and the after the harvest. 

Argument: A matrix as returned by `fvsGetSummary()`.

Return value: 

A matrix with additional columns and rows (if there were harvests in the run).

= Run Examples =

Example code is like a photograph: a few lines of working code are worth a 1,000 words of explanation. Note that these examples are all run with program FVSiec, it is left as an exercise to adapt them to your situation.

== Example 1 Simple run ==

Here a simple run of one stand simulated three with three different prescriptions. The keyword file and tree data for this run is in the `<open-fvs>/rFVS/tests/` directory. That directory is set as the working directory prior to any other commands be entered.  This run is the same as that found in `<open-fvs>/trunk/tests/FVSiec`, but in that case the run is done using the FVSiec _program_ rather than the _shared library_.

{{{
setwd ("<open-fvs>/rFVS/tests")  # Note: edit <open-fvs> to reflect your system.

# load the R functions
sdir = "../R"
for (rf in dir (sdir)) source (paste(sdir,rf,sep="/"))

# load the FVS library (windows example)
dyn.load("../../trunk/bin/libfvsSQL.dll")
dyn.load("../../trunk/bin/FVSiec.dll")

# specify the keyword file
fvsSetCmdLine("--keywordfile=iet01.key")

# Run the simulation as would be done using FVS as a program
fvsRun()
}}}

== Example 2 R-FVS Interaction with Graphics ==

The simple run in Example 1 is revisited to illustrate how to interact with FVS during the simulation. Here, the `fvsRun()` function is not used. In its place, code is included to show how to interact with FVS at each of the possible stop points. 

Two sets of data are captured for plotting after the simulation is completed. The first set are six data frames of tree heights, diameters, and species codes. There is one data frame for each of 3 management alternatives and 2 points in time (2020 and 2070) as set up in the keywords file. The second set are the 3 summary statistics tables captured at the end of the simulation.

The R code below assumes that the same set up steps used in [Example_1_Simple_run Example 1] are used up to the `fvsSetCmdLine()` command are run. Following this code, the example continues by showing how to create plots using the caputred data.

{{{

# specify the keyword file
fvsSetCmdLine("--keywordfile=iet01.key")

# set the stop codes, stop at the at location 2 and use -1 to signal 
# a stop point at every year

.Fortran("setstoppointcodes",as.integer(2),as.integer(-1))

# set up a list of the cases we desire to capture. 
saveTrees=list()
saveSummary=list()

# do until done
repeat
{
  # run fvs, capture the return code
  rtn=.Fortran("fvs",as.integer(0))[[1]]
  if (rtn != 0) break
  
  stopPoint = .Fortran("getrestartcode",as.integer(0))[[1]]

  switch(stopPoint+1,
    { # 0, stop before loading next stand, save summary statistics here.
  
      saveSummary = append(saveSummary,list(fvsGetSummary()))
      names(saveSummary)[length(saveSummary)] = paste(fvsGetStandIDs(),collapse=":")
      next
    }, 
    next, # 1, stop was before the first call to the Event Monitor
    { # 2 stop was after the first call to the Event Monitor.
    
      # get the simulation year from the event monitor variables. Ignore the return code   
      yr =.Fortran("fvsevmonattr","year",as.integer(4),"get",as.double(0),as.integer(0))[[4]]

      if (yr == 2020 || yr == 2070) 
      {
        # we desire to save these data. Fetch the stand and managment ids
        ids=fvsGetStandIDs()
        
        # form an case identifier used in the plots
        caseID = paste(ids[1], ids[2], as.character(yr),sep=":")

        # fetch the data that will be used for plotting.
        atts = fvsGetTreeAttrs(c("dbh","ht","species"))
        saveTrees=append(saveTrees,list(atts))
        names(saveTrees)[length(saveTrees)]=caseID
      }
      next
    },
    next, # 3 stop was just before the second call to the Event Monitor. 
    next, # 4 stop was just after the second call to the Event Monitor.
    next, # 5 stop was after growth and mortality has been computed but prior to applying.
    next  # 6 stop was just before the estab routines are called.
  )
}

}}}

One use of the saved data is to create plots. The first plots is a panel of height/diameter scatter plots. There are three management alternatives and we will capture the data to build the scatter plots for two points in time, one at the year 2010 and the other at year 2070. 

Here are the command to make the scatter plots:

{{{
# there are 6 plots, arrange them in 3 rows, 2 cols 
# for saving plot: png(file="rFVS_ex2.png",pointsize=10,height=6,width=4,units="in",res=200)
X11(height=6,width=4,pointsize=10)
par(mar=c(4,4,4,1)+.1)
layout(mat=matrix(1:6,3,2,byrow=TRUE))

# find global values for axes limits
xlim=range(unlist(lapply(saveTrees,function (x) range(x[,"dbh"]))))
ylim=range(unlist(lapply(saveTrees,function (x) range(x[,"ht"]))))

for (caseID in names(saveTrees))
{
  atts = saveTrees[[caseID]]
  plot(atts[,1:2],col=atts[,3],xlim=xlim,ylim=ylim,main=caseID,
   xlab="D.B.H. (inches)",ylab="Height (feet)")
}
#for saving plot: dev.off()

}}}

The second plots show standing cubic volume and total production of total cubic volume over time. There are three plots, one for each alternative. The plots share the same scaling; also note that not all of the simulations are the same length.

The summary statistics table provided by FVS is not set up for simple plotting. The fvsSetupSummary() (described above) is used to compute a matrix of values suitable for plotting.

{{{

# set up the summary statistics table for plotting
sumToPlot=lapply(saveSummary,fvsSetupSummary)

# find global range
yrRange =    range(unlist(lapply(sumToPlot,function (x) range(x[,"Year"]))))
tcuftRange = range(unlist(lapply(sumToPlot,function (x) range(x[,"TPrdTCuFt"]))))

X11(height=3,width=6,pointsize=10)
par(mar=c(4,4,4,1)+.1,mfcol=c(1,3))

for (caseID in names(sumToPlot))
{
  plot(TPrdTCuFt ~ Year, data=sumToPlot[[caseID]], xlim=yrRange, ylim=tcuftRange, type="b",
       main=caseID,col="green",ylab="Total cubic volume per acre")
  lines(TCuFt    ~ Year, data=sumToPlot[[caseID]], xlim=yrRange, ylim=tcuftRange, type="b",
       col="red")
}
}}} 