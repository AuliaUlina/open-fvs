#summary SVN Repository Management Policy (*work in progress*)
#sidebar TableOfContents

= Introduction =

This document outlines the source code repository management policy for Open-FVS. Everyone who has commit authority is expected to know and follow this policy. 

= Directory Structure =

The directory structure is:

||Directory||Description||
||`../trunk`||contains the currently up to date stable source code, makefiles, tests, and test outputs. ||
||`../branches/`||contains svn copies of trunk and is where "in progress" changes are stored. There will always be at least one copy of trunk called _dev_ in this directory|| 
||`../tags/`||contains copies of trunk as of the date used to name the tag directory. The first tag in Open-FVS is called _2012-04-22_. It will forever be a copy of the trunk as of that date.||

= Usage =

Committers are free to modify code in the `../branches` directory and commit their work to those branches as they see fit. The only requirement is that code should compile and link on at least one platform prior to being committed. Developers are encouraged to use common development branches when practical to limit the number of merges to the `../trunk` that will be needed to keep progress flowing. 

If you need a new replicate of the repository in the `../branches` directory, please send a message to one of the owners (administrators) who will build it for you. This procedure is necessary because _Google Code_ only allows owners to make changes in the repository structure. 

Commits to the `../trunk` should be coordinated with one of the project owners (administrators). In general, changes to the trunk (via merges from `../branches` or otherwise) should never be committed unless all tests are complete, code review is done, and documentation that may be needed is prepared. One of the items of documentation will usually include the addition of a file in the  `../changeNotes` directory (see `../changeNotes/template.txt`). Exceptions to this rule will generally include bug fixes that involve few lines of code and are not considered program enhancements. 

No one should ever commit changes to an existing _tag_. Entries in `../tags` are considered frozen snapshots of the repository.

= Workflow =

This section describes the process of adding or modifying FVS in any respect. It applies to adding new features, extensions, new variants, or modification of existing program elements. 

The first step is to refresh your copy of the repository and then consider whether or not the work requires a new branch. If the work is focused on a part of the model you are likely the only one working on, and it is a part that works independently of other parts, then perhaps committing changes to the always present _../branches/dev_ branch will be satisfactory. Otherwise create a new entry in _../branches/_ using the _../trunk_ as the source. 

Work in the branch, create test files and other information as needed and commit those changes frequently. Developers are encouraged to use the repository to store "in progress" work that will change in the near future. 

Routinely, as needed, merge the trunk onto the development branch so that changes that take place in ../trunk (which is the _most trusted_ code set) always form the foundation for the work being done in the branch.

As the development cycle nears completion, consult with a project administrator (or owner) about merging the new code onto the trunk. Usually, that step will be accomplished by an administrator. After the merge is complete and fully tested, the modified trunk will be committed to the repository. 

= Code review =

Code review is a requirement in Open-FVS, but how much review might be needed depends on the nature of the changes being made and the impact on users and other developers. Consult your colleagues and accomplish the level of review the fits the need. Note, however, that changes to FVS that cause changes in predictions can be controversial and will require that consensus be reached regarding integration of the changes into the _trunk_. One solution to resolving controversy is to create a new FVS variant with a unique name that contains the code that creates different predictions. The general principals here are utility and transparency: take actions that insure users have access to tools they need and that information describing model content is freely available.