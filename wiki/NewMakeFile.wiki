#summary Describes the new makefile approach

= Current `makefile` situation =

The current makefiles work, but they are very difficult to maintain and modify. They are almost impossible to explain to others and therefore represent a major impediment to increasing the participation of others in the development of FVS. To use current make files, see [BuildProcess].

Data that backs up these conclusions includes these facts:
  * The “main” makefile is 13,503 lines long and includes necessary but redundant information found elsewhere in slightly modified forms in the set of many makefiles.
  * There are a total of 114 sub makefiles to build FVS programs. 
  * To add a subroutine to a variant requires carefully editing about 3-5 makefiles.
  * It is very difficult to know exactly which source files form an FVS program. New programmers are often at a lost to know even how to find out what they need to change to improve a program or build a new FVS variant.

= A New Solution =

== Attributes ==

The basic new approach has the following attributes:

  * The entire build process is centered on the key relationship between an FVS program and a list of the source files on which the program depends. There will be one such list for each FVS program.
  * Changing the list of source files, adding new FVS programs, and so on, will be much simpler than it is now. 
  * The makefiles use automatic “implicit” rules whenever possible.
  * The makefiles depend on the use of GNU make rather than the make program from other vendors.
  * The build process will run on Win32, Win64, most Linux-based systems, and will automatically configure to system on which it is running. 
  * On Windows, the builds will be done using the Rtools tool-chain that is installed and run under a simple windows prompt eliminating the need to install the very large cygwin system. The gfortran and gcc compilers are included in this set of tools.
  * The build process will be based on autotools to the extent possible, which may mean that it is entirely based on autotools. 
  * Any program can be built into a shared library simply be deleting main.f from the list and changing the link instruction to output a shared library and not a program. All this will be handled by make given that a switch is set asking that shared library is desired rather than a program.
  * It will be easy to understand which FVS programs rely on a given source file. 
  * There will be redundant compilation: if several programs can use the same object file, that object file will be recreated for each program. It is interesting to note that this is often the case now, but one would never know unless the output from the make command is studied. For example, to build FVSiec in the open-fvs project using the current makefiles requires compiling 751 routines, yet the link step includes 494 object files!

== Implementation ==

A simple list of source files which define an FVS program is prepared. That list includes the list of include-files used to build the program. This list will include the relative path names to each file. There will be a naming convention for each list of these files based on the program name. For example, if the program name is FVSiec, then the list of source files will be called FVSiec_sourceList.txt. 

The build command would be as it is now, that is, to build FVSiec in the bin directory the programmer would enter “make FVSiec”. However the underlying sequence of events would be as follows rather than the current process:

  # A subdirectory is made called: FVSiec_buildDir (if it exists it is not recreated).
  # Every the source file in the list and not present in FVSiec_buildDir is copied to the directory. Any file that is already present and is older than the one in the list is copied. That is, the source files in FVSiec_buildDir are made up-to-date.
  # Every out of date object file in the build dir is compiled using generic conversion rules. 
  # A change in any one include-file renders all object files obsolete. The use of implicit rules rather than explicit rules will allow us to eliminate thousands of lines of carefully crafted yet often incorrect make rules.
  # Make `clean` would involve the simple task of removing `*_buildDir` from bin. Note that these directories and their contents would be considered temporary. Changes in source files made in these directories would not be managed by SVN and programmers would be advised not to even look at the contents of the “buildDir”.
  # Possible exceptions to these rules might include the fofem routines in the fire model which could be built as they are now (a separate make command would be used; a future improvement would be to build a library rather than a set object files). A similar exception might be for the very small set of c-language routines used for the new database extension (current practice is to build this set into a shared library).
  # No changes are currently being considered for the directory structure of the source files.
  # All of the object directories and the makefiles they contain could be deleted.

== Current Progress ==

As of December 28, 2011, the first of the `*_sourceList.txt` file was built and placed in the source `bin` directory. In addition the first first version of `newmakefile` is also `bin`. To try it (only on Win32 for now, and using the Rtools as outlined in  [BuildProcess]), do this:

{{{
cd bin
make --file=newmakefile FVSiec
}}}