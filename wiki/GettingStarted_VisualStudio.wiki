#summary Windows build process for Visual Studio 2010/Intel Fortran

=Getting Started with the Build Process in Windows using Visual Studio=

_Don Robinson, [http://www.essa.com ESSA] Technologies, March 2013_

This wiki documents the process of setting things up on a Windows PC so you can build FVS executables from the source files in the open-fvs repository. Builds of 32-bit versions have been tested on XP SP3, and 64-bit builds will likely be tested by the end of 2013. For more information on the build process, including information for builds on other platforms please refer to [GettingStarted_UnixAlike], [GettingStarted_MinGW] or the [FAQ].

= Contents =

<wiki:toc max_depth="2" />

==Getting the Necessary Tools==

You will need Administrator privileges to install the necessary tools, so ensure you have that before proceeding.

Building with Visual Studio requires *Microsoft Visual Studio 2010* and the *Intel Fortran compiler 2012 (XE)*. More recent versions of Visual Studio (including free or lower cost "Express" versions), and other compliant compilers _may work_, but have not been tested. Information about VS2010 is found at [http://www.microsoft.com/visualstudio/eng/downloads www.microsoft.com]. Information about the Intel compiler is found at [http://software.intel.com/en-us/intel-visual-fortran-composer-xe-evaluation http://software.intel.com]. You must have these both installed before continuing. Explaining the use of VS2010 is beyond the scope of this wiki page.

You will also need to install the *Cmake* system, which can be found at [http://cmake.org/cmake/resources/software.html http://cmake.org]. Download and install the latest version. The Cmake build steps described below have been tested with Version 2.8.10.2 and require at least _Version 2.6_.

==Getting the Source Files==
Please visit [GettingStarted_Windows] to find out about SVN clients and the FVS code base.

==Building the Visual Studio Solution (SLN) with Cmake==
Open a DOS Command Window and navigate to the directory which contains the FVS code base. If you aren't familiar with the command prompt, click Start > (All) Programs > Accessories > Command Prompt and the Command Window should open to your personal directory. Assuming you have the FVS code base installed as described in [GettingStarted_Windows], use the `cd` command to navigate to the `trunk\bin` directory inside the directory into which you checked out the open-fvs files. If you had placed the files into a directory called `MyFvsFiles` you would type the command as shown below.

{{{
cd \MyFvsFiles\trunk\bin
}}}

Once you have navigated to the correct directory you are ready to use *Cmake* to create a VS2010 solution file. If VS2010/Intel is installed, Cmake should automatically detect it and build the tools for VS2010. (If this does not happen automatically, please post the problem so that it can be resolved.)

At the command line type

{{{
cmake -G"Visual Studio 10" .
}}}

This will begin the creation of VS2010 solution files (suffix: SLN) for _all_ FVS variants. In Visual Studio parlance, a "solution" creates one or more software systems based on projects that are the components of the solution. In this case of FVS, an executable file is the principal software system that is created, but 3 component DLLs are also created. Each variant's SLN will be placed in a sub-directory like this

{{{
\MyFvsFiles\trunk\bin\FVSiec_CmakeDir
}}}

FVS variant subdirectories are named with the pattern `FVS***_CmakeDir`, where `***` is a 2- or 3-letter abbreviation for the variant (e.g., 2-letters `ie` for Inland Empire or `ls` for Lake States) optionally followed by a 1-letter abbreviation for an extension (e.g., `x` for the insect and disease extensions, or `c` for the climate extension).

Cmake utilizes two kinds of files to create to create each SLN file. First, it uses a master script file called *CMakeLists.txt* to control the creation of each variant SLN. (You are welcome to inspect this file, but editing it is not recommended for beginners.) This master script file utilizes a set of about 20 files in turn - one for each variant - with names like 'FVSiec_sourceList.txt'. These files need to exist in the `trunk\bin` directory in order to build the variants. 

As Cmake creates each variant SLN you will see something like this:

{{{
-- Building for: Visual Studio 10
-- tobuild = <...>/trunk/bin/FVSiec_sourceList.txt
-- Building FVS variant with VS10/Intel
-- The C compiler identification is MSVC 16.0.40219.1
-- Check for working C compiler using: Visual Studio 10
-- Check for working C compiler using: Visual Studio 10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working Fortran compiler using: Visual Studio 10
-- Check for working Fortran compiler using: Visual Studio 10  -- works
-- Detecting Fortran compiler ABI info
-- Detecting Fortran compiler ABI info - done
-- Determine Intel Fortran Compiler Implicit Link Path
-- Determine Intel Fortran Compiler Implicit Link Path -- done
-- Checking whether ifort supports Fortran 90
-- Checking whether ifort supports Fortran 90 -- yes
-- slfn = FVSiec_sourceList.txt prgName= FVSiec
-- FVSvariant = FVSiec
-- Configuring done
-- Generating done
-- Build files have been written to: <...>/trunk/bin/FVSiec_CmakeDir
-- Configuring done
-- Generating done
-- Build files have been written to: <...>/trunk/bin
}}}

When that is complete, you can proceed to customize each variant SLN file to build FVS. You only need to repeat the step of creating an SLN file if the underlying set of FVS source files change. Afterward, you can just rebuild the variants you need, based on periodic updates to the source code.

==Building the Executable for Development & Debugging==

Using Windows Explorer, navigate to the directory containing the variant SLN file you wish to work with. In the example that follows the Inland Empire + Climate variant (iec) is used throughout, and the SLN file will be located here:

{{{
\MyFvsFiles\trunk\bin\FVSiec_CmakeDir\FVS.sln
}}}

Double-click on FVS.sln to start Visual Studio. After it starts you will see that the Solution contains 8 sub-projects shown below:

||*Project Name* || *Exclude After 1st Build* || *Language* || *Output* ||
|| FVSiec|| No || FORTRAN || *_FVSiec.exe_* ||
|| All_BUILD|| Yes (optional) || - || - ||
|| dbstypedefs|| Yes || - || - ||
|| FVSfofem || No || C || *_FVSfofem.dll_* ||
|| FVS_iec || No || FORTRAN || *_FVS_iec.dll_* ||
|| mkdbsTypeDefs || Yes (optional) || C || DBSTYPEDEFS.F77 ||
|| FVSsql || No || C || _*FVSsql.dll*_ ||
|| ZERO_CHECK || Yes (optional) || - || - ||

The Solution Explorer tree control shown below will let you see each project component. You can navigate around this tree control to locate source code of various kinds. The bulk of the FVS code will be in the FVS_iec project.

[http://open-fvs.googlecode.com/svn/wiki/VS2010a.png]

Before trying to compile the FVSiec variant you should right-click the *FVSiec* project and select *Set as !StartUp Project*. It will then appear in bold font. Note that the FVSiec project is different from the FVS_iec project. The first of these builds the final executable; the second builds the DLL which contains most of the model code (and is linked to the executable, along with other DLL components).

When you start Visual Studio, the first build of the variant should include all projects, but subsequent builds do not need to repeatedly perform the same internal checks. An example of a component that can be excluded after the first build is 'dbstypedefs', which carries out the step of checking for the OS-dependent file TYPEDEFS.F77 created by the mkdbsTypeDefs project which supports for database connectivity for FVS. That component only needs to be created once. In Visual Studio such non-essential projects can be unloaded by right-clicking the project and selecting *Unload Project* after the first successful build. The dbstypedefs project is the critical project to unload; the others are optional, as shown in the preceding table.

The image above shows an example of the Visual Studio Solution Explorer tree after one of its redundant projects has been unloaded and FVSiec made the startup project.

[http://open-fvs.googlecode.com/svn/wiki/VS2010b.png]

It is often helpful to further automate the coding and debugging process by providing a response file that reproduces the file names entered by typing at the command line, making it unnecessary to repeatedly type input and output file names. This is easy to do by creating a response file using any valid file name (e.g. 'iet01.rsp'). Then right-click the FVSiec project in the Solution Explorer tree and select *Properties*. From the tree-control highlight *Debugging* and modify the Command Arguments to provide input redirection, as shown in the preceding figure.

==Building the Executable in Batch==

Assuming you have a command-prompt in this directory: 

{{{
\MyFvsFiles\trunk\bin
}}}

you can run the DOS batch file shown below to create Release versions of all variants in their respective sub-directories. If you wish to modify this batch file for a subset of variants or Debug versions, please make a copy and use your copy.

{{{
BuildAll_VS10.bat
}}}

==Redistributables==

FVS executables created with VS2010/Intel - the EXE and 3 DLLs - can be freely distributed to others. If these are provided to users who do not have the Intel Fortran compiler installed (or whose components cannot be found by the PATH variable), the following files will need to be provided. When provided, they can be copied into the directory containing the FVS executable.

|| *Component*      || *Debug* || *Release* || *Redistributable* ||
|| libifcoremd.dll  ||   || X || Yes ||
|| libifcoremdd.dll || X ||   || No  ||
|| libifportmd.dll  || X || X || Yes ||
|| libmmdd.dll      || X ||   || No  ||
|| libmmd.dll       || X || X || Yes ||
|| svml_dispmd.dll  ||   || X || Yes ||

Please note the restriction on distributing certain _Debug_ DLLs. On a default Intel installation, the release-mode redistributables can be found here:

{{{
C:\Program Files\Common Files\Intel\Shared Libraries\redist\ia32\compiler
}}}