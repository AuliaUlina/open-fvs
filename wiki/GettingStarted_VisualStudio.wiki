#summary Windows build process for Visual Studio

=Getting Started with the Build Process in Windows using Visual Studio=

This wiki documents the process of setting things up on a Windows PC so you can build FVS executables from the source files in the open-fvs repository. Builds of 32-bit versions have been tested, and 64-bit builds will likely be tested by the end of 2013. For more information on the build process, including information for builds on other platforms (Mac and Linux) please refer to the [GettingStarted_Windows],[GettingStarted_MinGW] wikis or the [FAQ] wiki.

==Getting The Necessary Tools==

You will need Administrator privileges to install the necessary tools, so ensure you have that before proceeding.

Building with Visual Studio requires *Microsoft Visual Studio 2010* and the *Intel Fortran compiler 2012 (XE)*. More recent versions of Visual Studio (including free or lower cost "Express" versions), and other compliant compilers _may work_, but have not been tested. Information about VS2010 is found here: http://www.microsoft.com/visualstudio/eng/downloads. Information about the Intel compiler is found here: http://software.intel.com/en-us/intel-visual-fortran-composer-xe-evaluation. You must have these both installed before continuing.

You will also need to install the Cmake system, which can be found here: http://cmake.org/cmake/resources/software.html. Download and install the latest version. The Cmake build steps described below have been tested with Version 2.8.8 and require at least Version 2.6.

==Getting The Source Files==
Please see [GettingStarted_Windows] to find out about SVN clients and the FVS code base.

==Building The Visual Studio Solution (SLN)==
Open a DOS Command Window and navigate to the directory which contains the FVS 
code base. If you aren't familiar with the command prompt, click Start > (All) Programs > Accessories > Command Prompt and the Command Window should open to your personal directory. Assuming you have the FVS code base installed as described under [GettingStarted_Windows], use the `cd` command to navigate to the `trunk\bin` directory inside the directory into which you checked out the open-fvs files. If you had placed the files into a directory called `MyFvsFiles` you would type the command as shown below.

{{{
cd \MyFvsFiles\trunk\bin
}}}

Once you have navigated to the correct directory you are ready to use *Cmake* to create a VS2010 solution file. If VS2010/Intel is installed, Cmake should automatically detect it and build the tools for VS2010. (If this does not happen automatically, please post the problem so that it can be resolved.)

At the command line type

{{{
cmake .
}}}

This will begin the creation of VS2010 solution files (suffix: SLN) for all FVS variants. Each variant's SLN will be placed in a sub-directory like this

{{{
\MyFvsFiles\trunk\bin\FVSiec_CmakeDir
}}}

FVS variant subdirectories are named `FVS***_CmakeDir`, where the `***` is the 2- or 3-letter abbreviation for the variant (e.g., 2-letters `ie` for Inland Empire or `ls` for Lake States) optionally followed by the 1-letter abbreviation for an extension (e.g., `x` for the insect and disease extensions, or `c` for the climate extension).

Cmake utilizes two kinds of files to create to create each SLN file. First, it uses a master script file called *CMakeLists.txt" to control the creation of each variant. (You are welcome to inspect this file, but editing it is not recommended for beginners.) This master script file utilizes a set of about 20 files in turn - one for each variant - with names like 'FVSiec_sourceList.txt'. These files need to exist in the `trunk\bin` directory in order to build the variants. 

With the successful creation of each variant SLN, you will see something like this:

{{{
-- Building for: Visual Studio 10
-- tobuild = <...>/trunk/bin/FVSiec_sourceList.txt
-- Building for: Visual Studio 10
-- Check for working C compiler using: Visual Studio 10
-- Check for working C compiler using: Visual Studio 10 -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working Fortran compiler using: Visual Studio 10
-- Check for working Fortran compiler using: Visual Studio 10  -- works
-- Detecting Fortran compiler ABI info
-- Detecting Fortran compiler ABI info - done
-- Determine Intel Fortran Compiler Implicit Link Path
-- Determine Intel Fortran Compiler Implicit Link Path -- done
-- Checking whether ifort supports Fortran 90
-- Checking whether ifort supports Fortran 90 -- yes
-- slfn = FVSiec_sourceList.txt prgName= FVSiec
-- FVSvariant = FVSiec
-- Configuring done
-- Generating done
-- Build files have been written to: <...>/trunk/bin/FVSiec_CmakeDir
-- Configuring done
-- Generating done
-- Build files have been written to: <...>/trunk/bin
}}}

When that is complete, you can proceed to customize each variant SLN file to build FVS. You only need to repeat this step if the set of FVS source files change. Afterward, you can just rebuild the variants you need, based on periodic updates to the source code.

==Building The Executable ==



{{{
make
}}}